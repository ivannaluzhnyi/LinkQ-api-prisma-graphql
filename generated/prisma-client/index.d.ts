// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  account: (where?: AccountWhereInput) => Promise<boolean>;
  application: (where?: ApplicationWhereInput) => Promise<boolean>;
  commentaire: (where?: CommentaireWhereInput) => Promise<boolean>;
  contract: (where?: ContractWhereInput) => Promise<boolean>;
  event: (where?: EventWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  account: (where: AccountWhereUniqueInput) => AccountNullablePromise;
  accounts: (args?: {
    where?: AccountWhereInput;
    orderBy?: AccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Account>;
  accountsConnection: (args?: {
    where?: AccountWhereInput;
    orderBy?: AccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AccountConnectionPromise;
  application: (
    where: ApplicationWhereUniqueInput
  ) => ApplicationNullablePromise;
  applications: (args?: {
    where?: ApplicationWhereInput;
    orderBy?: ApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Application>;
  applicationsConnection: (args?: {
    where?: ApplicationWhereInput;
    orderBy?: ApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ApplicationConnectionPromise;
  commentaire: (
    where: CommentaireWhereUniqueInput
  ) => CommentaireNullablePromise;
  commentaires: (args?: {
    where?: CommentaireWhereInput;
    orderBy?: CommentaireOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Commentaire>;
  commentairesConnection: (args?: {
    where?: CommentaireWhereInput;
    orderBy?: CommentaireOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentaireConnectionPromise;
  contract: (where: ContractWhereUniqueInput) => ContractNullablePromise;
  contracts: (args?: {
    where?: ContractWhereInput;
    orderBy?: ContractOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Contract>;
  contractsConnection: (args?: {
    where?: ContractWhereInput;
    orderBy?: ContractOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ContractConnectionPromise;
  event: (where: EventWhereUniqueInput) => EventNullablePromise;
  events: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Event>;
  eventsConnection: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EventConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAccount: (data: AccountCreateInput) => AccountPromise;
  updateAccount: (args: {
    data: AccountUpdateInput;
    where: AccountWhereUniqueInput;
  }) => AccountPromise;
  updateManyAccounts: (args: {
    data: AccountUpdateManyMutationInput;
    where?: AccountWhereInput;
  }) => BatchPayloadPromise;
  upsertAccount: (args: {
    where: AccountWhereUniqueInput;
    create: AccountCreateInput;
    update: AccountUpdateInput;
  }) => AccountPromise;
  deleteAccount: (where: AccountWhereUniqueInput) => AccountPromise;
  deleteManyAccounts: (where?: AccountWhereInput) => BatchPayloadPromise;
  createApplication: (data: ApplicationCreateInput) => ApplicationPromise;
  updateApplication: (args: {
    data: ApplicationUpdateInput;
    where: ApplicationWhereUniqueInput;
  }) => ApplicationPromise;
  updateManyApplications: (args: {
    data: ApplicationUpdateManyMutationInput;
    where?: ApplicationWhereInput;
  }) => BatchPayloadPromise;
  upsertApplication: (args: {
    where: ApplicationWhereUniqueInput;
    create: ApplicationCreateInput;
    update: ApplicationUpdateInput;
  }) => ApplicationPromise;
  deleteApplication: (where: ApplicationWhereUniqueInput) => ApplicationPromise;
  deleteManyApplications: (
    where?: ApplicationWhereInput
  ) => BatchPayloadPromise;
  createCommentaire: (data: CommentaireCreateInput) => CommentairePromise;
  updateCommentaire: (args: {
    data: CommentaireUpdateInput;
    where: CommentaireWhereUniqueInput;
  }) => CommentairePromise;
  updateManyCommentaires: (args: {
    data: CommentaireUpdateManyMutationInput;
    where?: CommentaireWhereInput;
  }) => BatchPayloadPromise;
  upsertCommentaire: (args: {
    where: CommentaireWhereUniqueInput;
    create: CommentaireCreateInput;
    update: CommentaireUpdateInput;
  }) => CommentairePromise;
  deleteCommentaire: (where: CommentaireWhereUniqueInput) => CommentairePromise;
  deleteManyCommentaires: (
    where?: CommentaireWhereInput
  ) => BatchPayloadPromise;
  createContract: (data: ContractCreateInput) => ContractPromise;
  updateContract: (args: {
    data: ContractUpdateInput;
    where: ContractWhereUniqueInput;
  }) => ContractPromise;
  updateManyContracts: (args: {
    data: ContractUpdateManyMutationInput;
    where?: ContractWhereInput;
  }) => BatchPayloadPromise;
  upsertContract: (args: {
    where: ContractWhereUniqueInput;
    create: ContractCreateInput;
    update: ContractUpdateInput;
  }) => ContractPromise;
  deleteContract: (where: ContractWhereUniqueInput) => ContractPromise;
  deleteManyContracts: (where?: ContractWhereInput) => BatchPayloadPromise;
  createEvent: (data: EventCreateInput) => EventPromise;
  updateEvent: (args: {
    data: EventUpdateInput;
    where: EventWhereUniqueInput;
  }) => EventPromise;
  updateManyEvents: (args: {
    data: EventUpdateManyMutationInput;
    where?: EventWhereInput;
  }) => BatchPayloadPromise;
  upsertEvent: (args: {
    where: EventWhereUniqueInput;
    create: EventCreateInput;
    update: EventUpdateInput;
  }) => EventPromise;
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise;
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  account: (
    where?: AccountSubscriptionWhereInput
  ) => AccountSubscriptionPayloadSubscription;
  application: (
    where?: ApplicationSubscriptionWhereInput
  ) => ApplicationSubscriptionPayloadSubscription;
  commentaire: (
    where?: CommentaireSubscriptionWhereInput
  ) => CommentaireSubscriptionPayloadSubscription;
  contract: (
    where?: ContractSubscriptionWhereInput
  ) => ContractSubscriptionPayloadSubscription;
  event: (
    where?: EventSubscriptionWhereInput
  ) => EventSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type EventStatus = "READ" | "RESIVE";

export type ApplicationStatus = "ACCEPTED" | "REFUSED" | "PENDING";

export type ApplicationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "created_ASC"
  | "created_DESC"
  | "offer_ASC"
  | "offer_DESC"
  | "property_id_ASC"
  | "property_id_DESC"
  | "updated_ASC"
  | "updated_DESC"
  | "status_ASC"
  | "status_DESC";

export type EventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "status_ASC"
  | "status_DESC"
  | "created_ASC"
  | "created_DESC"
  | "updated_ASC"
  | "updated_DESC";

export type AccountOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "birthdate_ASC"
  | "birthdate_DESC"
  | "created_ASC"
  | "created_DESC"
  | "email_ASC"
  | "email_DESC"
  | "firstname_ASC"
  | "firstname_DESC"
  | "isActive_ASC"
  | "isActive_DESC"
  | "lastname_ASC"
  | "lastname_DESC"
  | "password_ASC"
  | "password_DESC"
  | "roles_ASC"
  | "roles_DESC"
  | "salary_ASC"
  | "salary_DESC"
  | "updated_ASC"
  | "updated_DESC";

export type CommentaireOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "message_ASC"
  | "message_DESC"
  | "idProperty_ASC"
  | "idProperty_DESC"
  | "created_ASC"
  | "created_DESC";

export type ContractOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "price_ASC"
  | "price_DESC"
  | "created_ASC"
  | "created_DESC"
  | "updated_ASC"
  | "updated_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AccountWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
  email?: Maybe<String>;
}>;

export interface ApplicationWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  buyer?: Maybe<AccountWhereInput>;
  contract?: Maybe<ContractWhereInput>;
  created?: Maybe<DateTimeInput>;
  created_not?: Maybe<DateTimeInput>;
  created_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_lt?: Maybe<DateTimeInput>;
  created_lte?: Maybe<DateTimeInput>;
  created_gt?: Maybe<DateTimeInput>;
  created_gte?: Maybe<DateTimeInput>;
  offer?: Maybe<Float>;
  offer_not?: Maybe<Float>;
  offer_in?: Maybe<Float[] | Float>;
  offer_not_in?: Maybe<Float[] | Float>;
  offer_lt?: Maybe<Float>;
  offer_lte?: Maybe<Float>;
  offer_gt?: Maybe<Float>;
  offer_gte?: Maybe<Float>;
  property_id?: Maybe<String>;
  property_id_not?: Maybe<String>;
  property_id_in?: Maybe<String[] | String>;
  property_id_not_in?: Maybe<String[] | String>;
  property_id_lt?: Maybe<String>;
  property_id_lte?: Maybe<String>;
  property_id_gt?: Maybe<String>;
  property_id_gte?: Maybe<String>;
  property_id_contains?: Maybe<String>;
  property_id_not_contains?: Maybe<String>;
  property_id_starts_with?: Maybe<String>;
  property_id_not_starts_with?: Maybe<String>;
  property_id_ends_with?: Maybe<String>;
  property_id_not_ends_with?: Maybe<String>;
  updated?: Maybe<DateTimeInput>;
  updated_not?: Maybe<DateTimeInput>;
  updated_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_lt?: Maybe<DateTimeInput>;
  updated_lte?: Maybe<DateTimeInput>;
  updated_gt?: Maybe<DateTimeInput>;
  updated_gte?: Maybe<DateTimeInput>;
  status?: Maybe<ApplicationStatus>;
  status_not?: Maybe<ApplicationStatus>;
  status_in?: Maybe<ApplicationStatus[] | ApplicationStatus>;
  status_not_in?: Maybe<ApplicationStatus[] | ApplicationStatus>;
  AND?: Maybe<ApplicationWhereInput[] | ApplicationWhereInput>;
  OR?: Maybe<ApplicationWhereInput[] | ApplicationWhereInput>;
  NOT?: Maybe<ApplicationWhereInput[] | ApplicationWhereInput>;
}

export interface AccountWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  application_every?: Maybe<ApplicationWhereInput>;
  application_some?: Maybe<ApplicationWhereInput>;
  application_none?: Maybe<ApplicationWhereInput>;
  birthdate?: Maybe<DateTimeInput>;
  birthdate_not?: Maybe<DateTimeInput>;
  birthdate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthdate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthdate_lt?: Maybe<DateTimeInput>;
  birthdate_lte?: Maybe<DateTimeInput>;
  birthdate_gt?: Maybe<DateTimeInput>;
  birthdate_gte?: Maybe<DateTimeInput>;
  created?: Maybe<DateTimeInput>;
  created_not?: Maybe<DateTimeInput>;
  created_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_lt?: Maybe<DateTimeInput>;
  created_lte?: Maybe<DateTimeInput>;
  created_gt?: Maybe<DateTimeInput>;
  created_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  firstname?: Maybe<String>;
  firstname_not?: Maybe<String>;
  firstname_in?: Maybe<String[] | String>;
  firstname_not_in?: Maybe<String[] | String>;
  firstname_lt?: Maybe<String>;
  firstname_lte?: Maybe<String>;
  firstname_gt?: Maybe<String>;
  firstname_gte?: Maybe<String>;
  firstname_contains?: Maybe<String>;
  firstname_not_contains?: Maybe<String>;
  firstname_starts_with?: Maybe<String>;
  firstname_not_starts_with?: Maybe<String>;
  firstname_ends_with?: Maybe<String>;
  firstname_not_ends_with?: Maybe<String>;
  isActive?: Maybe<Boolean>;
  isActive_not?: Maybe<Boolean>;
  lastname?: Maybe<String>;
  lastname_not?: Maybe<String>;
  lastname_in?: Maybe<String[] | String>;
  lastname_not_in?: Maybe<String[] | String>;
  lastname_lt?: Maybe<String>;
  lastname_lte?: Maybe<String>;
  lastname_gt?: Maybe<String>;
  lastname_gte?: Maybe<String>;
  lastname_contains?: Maybe<String>;
  lastname_not_contains?: Maybe<String>;
  lastname_starts_with?: Maybe<String>;
  lastname_not_starts_with?: Maybe<String>;
  lastname_ends_with?: Maybe<String>;
  lastname_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  salary?: Maybe<Float>;
  salary_not?: Maybe<Float>;
  salary_in?: Maybe<Float[] | Float>;
  salary_not_in?: Maybe<Float[] | Float>;
  salary_lt?: Maybe<Float>;
  salary_lte?: Maybe<Float>;
  salary_gt?: Maybe<Float>;
  salary_gte?: Maybe<Float>;
  events_every?: Maybe<EventWhereInput>;
  events_some?: Maybe<EventWhereInput>;
  events_none?: Maybe<EventWhereInput>;
  updated?: Maybe<DateTimeInput>;
  updated_not?: Maybe<DateTimeInput>;
  updated_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_lt?: Maybe<DateTimeInput>;
  updated_lte?: Maybe<DateTimeInput>;
  updated_gt?: Maybe<DateTimeInput>;
  updated_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AccountWhereInput[] | AccountWhereInput>;
  OR?: Maybe<AccountWhereInput[] | AccountWhereInput>;
  NOT?: Maybe<AccountWhereInput[] | AccountWhereInput>;
}

export interface EventWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  status?: Maybe<EventStatus>;
  status_not?: Maybe<EventStatus>;
  status_in?: Maybe<EventStatus[] | EventStatus>;
  status_not_in?: Maybe<EventStatus[] | EventStatus>;
  owener?: Maybe<AccountWhereInput>;
  created?: Maybe<DateTimeInput>;
  created_not?: Maybe<DateTimeInput>;
  created_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_lt?: Maybe<DateTimeInput>;
  created_lte?: Maybe<DateTimeInput>;
  created_gt?: Maybe<DateTimeInput>;
  created_gte?: Maybe<DateTimeInput>;
  updated?: Maybe<DateTimeInput>;
  updated_not?: Maybe<DateTimeInput>;
  updated_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_lt?: Maybe<DateTimeInput>;
  updated_lte?: Maybe<DateTimeInput>;
  updated_gt?: Maybe<DateTimeInput>;
  updated_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<EventWhereInput[] | EventWhereInput>;
  OR?: Maybe<EventWhereInput[] | EventWhereInput>;
  NOT?: Maybe<EventWhereInput[] | EventWhereInput>;
}

export interface ContractWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  created?: Maybe<DateTimeInput>;
  created_not?: Maybe<DateTimeInput>;
  created_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_lt?: Maybe<DateTimeInput>;
  created_lte?: Maybe<DateTimeInput>;
  created_gt?: Maybe<DateTimeInput>;
  created_gte?: Maybe<DateTimeInput>;
  updated?: Maybe<DateTimeInput>;
  updated_not?: Maybe<DateTimeInput>;
  updated_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_lt?: Maybe<DateTimeInput>;
  updated_lte?: Maybe<DateTimeInput>;
  updated_gt?: Maybe<DateTimeInput>;
  updated_gte?: Maybe<DateTimeInput>;
  application?: Maybe<ApplicationWhereInput>;
  AND?: Maybe<ContractWhereInput[] | ContractWhereInput>;
  OR?: Maybe<ContractWhereInput[] | ContractWhereInput>;
  NOT?: Maybe<ContractWhereInput[] | ContractWhereInput>;
}

export type ApplicationWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export type CommentaireWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface CommentaireWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  idProperty?: Maybe<Int>;
  idProperty_not?: Maybe<Int>;
  idProperty_in?: Maybe<Int[] | Int>;
  idProperty_not_in?: Maybe<Int[] | Int>;
  idProperty_lt?: Maybe<Int>;
  idProperty_lte?: Maybe<Int>;
  idProperty_gt?: Maybe<Int>;
  idProperty_gte?: Maybe<Int>;
  created?: Maybe<DateTimeInput>;
  created_not?: Maybe<DateTimeInput>;
  created_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_lt?: Maybe<DateTimeInput>;
  created_lte?: Maybe<DateTimeInput>;
  created_gt?: Maybe<DateTimeInput>;
  created_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentaireWhereInput[] | CommentaireWhereInput>;
  OR?: Maybe<CommentaireWhereInput[] | CommentaireWhereInput>;
  NOT?: Maybe<CommentaireWhereInput[] | CommentaireWhereInput>;
}

export type ContractWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export type EventWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface AccountCreateInput {
  id?: Maybe<Int>;
  application?: Maybe<ApplicationCreateManyWithoutBuyerInput>;
  birthdate?: Maybe<DateTimeInput>;
  email: String;
  firstname?: Maybe<String>;
  isActive: Boolean;
  lastname?: Maybe<String>;
  password: String;
  roles: Json;
  salary?: Maybe<Float>;
  events?: Maybe<EventCreateManyWithoutOwenerInput>;
}

export interface ApplicationCreateManyWithoutBuyerInput {
  create?: Maybe<
    ApplicationCreateWithoutBuyerInput[] | ApplicationCreateWithoutBuyerInput
  >;
  connect?: Maybe<ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput>;
}

export interface ApplicationCreateWithoutBuyerInput {
  id?: Maybe<Int>;
  contract?: Maybe<ContractCreateOneWithoutApplicationInput>;
  offer: Float;
  property_id?: Maybe<String>;
  status?: Maybe<ApplicationStatus>;
}

export interface ContractCreateOneWithoutApplicationInput {
  create?: Maybe<ContractCreateWithoutApplicationInput>;
  connect?: Maybe<ContractWhereUniqueInput>;
}

export interface ContractCreateWithoutApplicationInput {
  id?: Maybe<Int>;
  price: Float;
}

export interface EventCreateManyWithoutOwenerInput {
  create?: Maybe<
    EventCreateWithoutOwenerInput[] | EventCreateWithoutOwenerInput
  >;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
}

export interface EventCreateWithoutOwenerInput {
  id?: Maybe<Int>;
  title: String;
  description?: Maybe<String>;
  status?: Maybe<EventStatus>;
}

export interface AccountUpdateInput {
  application?: Maybe<ApplicationUpdateManyWithoutBuyerInput>;
  birthdate?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  firstname?: Maybe<String>;
  isActive?: Maybe<Boolean>;
  lastname?: Maybe<String>;
  password?: Maybe<String>;
  roles?: Maybe<Json>;
  salary?: Maybe<Float>;
  events?: Maybe<EventUpdateManyWithoutOwenerInput>;
}

export interface ApplicationUpdateManyWithoutBuyerInput {
  create?: Maybe<
    ApplicationCreateWithoutBuyerInput[] | ApplicationCreateWithoutBuyerInput
  >;
  delete?: Maybe<ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput>;
  connect?: Maybe<ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput>;
  set?: Maybe<ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput>;
  disconnect?: Maybe<
    ApplicationWhereUniqueInput[] | ApplicationWhereUniqueInput
  >;
  update?: Maybe<
    | ApplicationUpdateWithWhereUniqueWithoutBuyerInput[]
    | ApplicationUpdateWithWhereUniqueWithoutBuyerInput
  >;
  upsert?: Maybe<
    | ApplicationUpsertWithWhereUniqueWithoutBuyerInput[]
    | ApplicationUpsertWithWhereUniqueWithoutBuyerInput
  >;
  deleteMany?: Maybe<
    ApplicationScalarWhereInput[] | ApplicationScalarWhereInput
  >;
  updateMany?: Maybe<
    | ApplicationUpdateManyWithWhereNestedInput[]
    | ApplicationUpdateManyWithWhereNestedInput
  >;
}

export interface ApplicationUpdateWithWhereUniqueWithoutBuyerInput {
  where: ApplicationWhereUniqueInput;
  data: ApplicationUpdateWithoutBuyerDataInput;
}

export interface ApplicationUpdateWithoutBuyerDataInput {
  contract?: Maybe<ContractUpdateOneWithoutApplicationInput>;
  offer?: Maybe<Float>;
  property_id?: Maybe<String>;
  status?: Maybe<ApplicationStatus>;
}

export interface ContractUpdateOneWithoutApplicationInput {
  create?: Maybe<ContractCreateWithoutApplicationInput>;
  update?: Maybe<ContractUpdateWithoutApplicationDataInput>;
  upsert?: Maybe<ContractUpsertWithoutApplicationInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ContractWhereUniqueInput>;
}

export interface ContractUpdateWithoutApplicationDataInput {
  price?: Maybe<Float>;
}

export interface ContractUpsertWithoutApplicationInput {
  update: ContractUpdateWithoutApplicationDataInput;
  create: ContractCreateWithoutApplicationInput;
}

export interface ApplicationUpsertWithWhereUniqueWithoutBuyerInput {
  where: ApplicationWhereUniqueInput;
  update: ApplicationUpdateWithoutBuyerDataInput;
  create: ApplicationCreateWithoutBuyerInput;
}

export interface ApplicationScalarWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  created?: Maybe<DateTimeInput>;
  created_not?: Maybe<DateTimeInput>;
  created_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_lt?: Maybe<DateTimeInput>;
  created_lte?: Maybe<DateTimeInput>;
  created_gt?: Maybe<DateTimeInput>;
  created_gte?: Maybe<DateTimeInput>;
  offer?: Maybe<Float>;
  offer_not?: Maybe<Float>;
  offer_in?: Maybe<Float[] | Float>;
  offer_not_in?: Maybe<Float[] | Float>;
  offer_lt?: Maybe<Float>;
  offer_lte?: Maybe<Float>;
  offer_gt?: Maybe<Float>;
  offer_gte?: Maybe<Float>;
  property_id?: Maybe<String>;
  property_id_not?: Maybe<String>;
  property_id_in?: Maybe<String[] | String>;
  property_id_not_in?: Maybe<String[] | String>;
  property_id_lt?: Maybe<String>;
  property_id_lte?: Maybe<String>;
  property_id_gt?: Maybe<String>;
  property_id_gte?: Maybe<String>;
  property_id_contains?: Maybe<String>;
  property_id_not_contains?: Maybe<String>;
  property_id_starts_with?: Maybe<String>;
  property_id_not_starts_with?: Maybe<String>;
  property_id_ends_with?: Maybe<String>;
  property_id_not_ends_with?: Maybe<String>;
  updated?: Maybe<DateTimeInput>;
  updated_not?: Maybe<DateTimeInput>;
  updated_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_lt?: Maybe<DateTimeInput>;
  updated_lte?: Maybe<DateTimeInput>;
  updated_gt?: Maybe<DateTimeInput>;
  updated_gte?: Maybe<DateTimeInput>;
  status?: Maybe<ApplicationStatus>;
  status_not?: Maybe<ApplicationStatus>;
  status_in?: Maybe<ApplicationStatus[] | ApplicationStatus>;
  status_not_in?: Maybe<ApplicationStatus[] | ApplicationStatus>;
  AND?: Maybe<ApplicationScalarWhereInput[] | ApplicationScalarWhereInput>;
  OR?: Maybe<ApplicationScalarWhereInput[] | ApplicationScalarWhereInput>;
  NOT?: Maybe<ApplicationScalarWhereInput[] | ApplicationScalarWhereInput>;
}

export interface ApplicationUpdateManyWithWhereNestedInput {
  where: ApplicationScalarWhereInput;
  data: ApplicationUpdateManyDataInput;
}

export interface ApplicationUpdateManyDataInput {
  offer?: Maybe<Float>;
  property_id?: Maybe<String>;
  status?: Maybe<ApplicationStatus>;
}

export interface EventUpdateManyWithoutOwenerInput {
  create?: Maybe<
    EventCreateWithoutOwenerInput[] | EventCreateWithoutOwenerInput
  >;
  delete?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  set?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  disconnect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  update?: Maybe<
    | EventUpdateWithWhereUniqueWithoutOwenerInput[]
    | EventUpdateWithWhereUniqueWithoutOwenerInput
  >;
  upsert?: Maybe<
    | EventUpsertWithWhereUniqueWithoutOwenerInput[]
    | EventUpsertWithWhereUniqueWithoutOwenerInput
  >;
  deleteMany?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  updateMany?: Maybe<
    EventUpdateManyWithWhereNestedInput[] | EventUpdateManyWithWhereNestedInput
  >;
}

export interface EventUpdateWithWhereUniqueWithoutOwenerInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutOwenerDataInput;
}

export interface EventUpdateWithoutOwenerDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  status?: Maybe<EventStatus>;
}

export interface EventUpsertWithWhereUniqueWithoutOwenerInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutOwenerDataInput;
  create: EventCreateWithoutOwenerInput;
}

export interface EventScalarWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  status?: Maybe<EventStatus>;
  status_not?: Maybe<EventStatus>;
  status_in?: Maybe<EventStatus[] | EventStatus>;
  status_not_in?: Maybe<EventStatus[] | EventStatus>;
  created?: Maybe<DateTimeInput>;
  created_not?: Maybe<DateTimeInput>;
  created_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_lt?: Maybe<DateTimeInput>;
  created_lte?: Maybe<DateTimeInput>;
  created_gt?: Maybe<DateTimeInput>;
  created_gte?: Maybe<DateTimeInput>;
  updated?: Maybe<DateTimeInput>;
  updated_not?: Maybe<DateTimeInput>;
  updated_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updated_lt?: Maybe<DateTimeInput>;
  updated_lte?: Maybe<DateTimeInput>;
  updated_gt?: Maybe<DateTimeInput>;
  updated_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  OR?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  NOT?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
}

export interface EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput;
  data: EventUpdateManyDataInput;
}

export interface EventUpdateManyDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  status?: Maybe<EventStatus>;
}

export interface AccountUpdateManyMutationInput {
  birthdate?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  firstname?: Maybe<String>;
  isActive?: Maybe<Boolean>;
  lastname?: Maybe<String>;
  password?: Maybe<String>;
  roles?: Maybe<Json>;
  salary?: Maybe<Float>;
}

export interface ApplicationCreateInput {
  id?: Maybe<Int>;
  buyer: AccountCreateOneWithoutApplicationInput;
  contract?: Maybe<ContractCreateOneWithoutApplicationInput>;
  offer: Float;
  property_id?: Maybe<String>;
  status?: Maybe<ApplicationStatus>;
}

export interface AccountCreateOneWithoutApplicationInput {
  create?: Maybe<AccountCreateWithoutApplicationInput>;
  connect?: Maybe<AccountWhereUniqueInput>;
}

export interface AccountCreateWithoutApplicationInput {
  id?: Maybe<Int>;
  birthdate?: Maybe<DateTimeInput>;
  email: String;
  firstname?: Maybe<String>;
  isActive: Boolean;
  lastname?: Maybe<String>;
  password: String;
  roles: Json;
  salary?: Maybe<Float>;
  events?: Maybe<EventCreateManyWithoutOwenerInput>;
}

export interface ApplicationUpdateInput {
  buyer?: Maybe<AccountUpdateOneRequiredWithoutApplicationInput>;
  contract?: Maybe<ContractUpdateOneWithoutApplicationInput>;
  offer?: Maybe<Float>;
  property_id?: Maybe<String>;
  status?: Maybe<ApplicationStatus>;
}

export interface AccountUpdateOneRequiredWithoutApplicationInput {
  create?: Maybe<AccountCreateWithoutApplicationInput>;
  update?: Maybe<AccountUpdateWithoutApplicationDataInput>;
  upsert?: Maybe<AccountUpsertWithoutApplicationInput>;
  connect?: Maybe<AccountWhereUniqueInput>;
}

export interface AccountUpdateWithoutApplicationDataInput {
  birthdate?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  firstname?: Maybe<String>;
  isActive?: Maybe<Boolean>;
  lastname?: Maybe<String>;
  password?: Maybe<String>;
  roles?: Maybe<Json>;
  salary?: Maybe<Float>;
  events?: Maybe<EventUpdateManyWithoutOwenerInput>;
}

export interface AccountUpsertWithoutApplicationInput {
  update: AccountUpdateWithoutApplicationDataInput;
  create: AccountCreateWithoutApplicationInput;
}

export interface ApplicationUpdateManyMutationInput {
  offer?: Maybe<Float>;
  property_id?: Maybe<String>;
  status?: Maybe<ApplicationStatus>;
}

export interface CommentaireCreateInput {
  id?: Maybe<Int>;
  email: String;
  message: String;
  idProperty: Int;
}

export interface CommentaireUpdateInput {
  email?: Maybe<String>;
  message?: Maybe<String>;
  idProperty?: Maybe<Int>;
}

export interface CommentaireUpdateManyMutationInput {
  email?: Maybe<String>;
  message?: Maybe<String>;
  idProperty?: Maybe<Int>;
}

export interface ContractCreateInput {
  id?: Maybe<Int>;
  price: Float;
  application: ApplicationCreateOneWithoutContractInput;
}

export interface ApplicationCreateOneWithoutContractInput {
  create?: Maybe<ApplicationCreateWithoutContractInput>;
  connect?: Maybe<ApplicationWhereUniqueInput>;
}

export interface ApplicationCreateWithoutContractInput {
  id?: Maybe<Int>;
  buyer: AccountCreateOneWithoutApplicationInput;
  offer: Float;
  property_id?: Maybe<String>;
  status?: Maybe<ApplicationStatus>;
}

export interface ContractUpdateInput {
  price?: Maybe<Float>;
  application?: Maybe<ApplicationUpdateOneRequiredWithoutContractInput>;
}

export interface ApplicationUpdateOneRequiredWithoutContractInput {
  create?: Maybe<ApplicationCreateWithoutContractInput>;
  update?: Maybe<ApplicationUpdateWithoutContractDataInput>;
  upsert?: Maybe<ApplicationUpsertWithoutContractInput>;
  connect?: Maybe<ApplicationWhereUniqueInput>;
}

export interface ApplicationUpdateWithoutContractDataInput {
  buyer?: Maybe<AccountUpdateOneRequiredWithoutApplicationInput>;
  offer?: Maybe<Float>;
  property_id?: Maybe<String>;
  status?: Maybe<ApplicationStatus>;
}

export interface ApplicationUpsertWithoutContractInput {
  update: ApplicationUpdateWithoutContractDataInput;
  create: ApplicationCreateWithoutContractInput;
}

export interface ContractUpdateManyMutationInput {
  price?: Maybe<Float>;
}

export interface EventCreateInput {
  id?: Maybe<Int>;
  title: String;
  description?: Maybe<String>;
  status?: Maybe<EventStatus>;
  owener?: Maybe<AccountCreateOneWithoutEventsInput>;
}

export interface AccountCreateOneWithoutEventsInput {
  create?: Maybe<AccountCreateWithoutEventsInput>;
  connect?: Maybe<AccountWhereUniqueInput>;
}

export interface AccountCreateWithoutEventsInput {
  id?: Maybe<Int>;
  application?: Maybe<ApplicationCreateManyWithoutBuyerInput>;
  birthdate?: Maybe<DateTimeInput>;
  email: String;
  firstname?: Maybe<String>;
  isActive: Boolean;
  lastname?: Maybe<String>;
  password: String;
  roles: Json;
  salary?: Maybe<Float>;
}

export interface EventUpdateInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  status?: Maybe<EventStatus>;
  owener?: Maybe<AccountUpdateOneWithoutEventsInput>;
}

export interface AccountUpdateOneWithoutEventsInput {
  create?: Maybe<AccountCreateWithoutEventsInput>;
  update?: Maybe<AccountUpdateWithoutEventsDataInput>;
  upsert?: Maybe<AccountUpsertWithoutEventsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<AccountWhereUniqueInput>;
}

export interface AccountUpdateWithoutEventsDataInput {
  application?: Maybe<ApplicationUpdateManyWithoutBuyerInput>;
  birthdate?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  firstname?: Maybe<String>;
  isActive?: Maybe<Boolean>;
  lastname?: Maybe<String>;
  password?: Maybe<String>;
  roles?: Maybe<Json>;
  salary?: Maybe<Float>;
}

export interface AccountUpsertWithoutEventsInput {
  update: AccountUpdateWithoutEventsDataInput;
  create: AccountCreateWithoutEventsInput;
}

export interface EventUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  status?: Maybe<EventStatus>;
}

export interface AccountSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AccountWhereInput>;
  AND?: Maybe<AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput>;
  OR?: Maybe<AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput>;
  NOT?: Maybe<AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput>;
}

export interface ApplicationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ApplicationWhereInput>;
  AND?: Maybe<
    ApplicationSubscriptionWhereInput[] | ApplicationSubscriptionWhereInput
  >;
  OR?: Maybe<
    ApplicationSubscriptionWhereInput[] | ApplicationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ApplicationSubscriptionWhereInput[] | ApplicationSubscriptionWhereInput
  >;
}

export interface CommentaireSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentaireWhereInput>;
  AND?: Maybe<
    CommentaireSubscriptionWhereInput[] | CommentaireSubscriptionWhereInput
  >;
  OR?: Maybe<
    CommentaireSubscriptionWhereInput[] | CommentaireSubscriptionWhereInput
  >;
  NOT?: Maybe<
    CommentaireSubscriptionWhereInput[] | CommentaireSubscriptionWhereInput
  >;
}

export interface ContractSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ContractWhereInput>;
  AND?: Maybe<
    ContractSubscriptionWhereInput[] | ContractSubscriptionWhereInput
  >;
  OR?: Maybe<ContractSubscriptionWhereInput[] | ContractSubscriptionWhereInput>;
  NOT?: Maybe<
    ContractSubscriptionWhereInput[] | ContractSubscriptionWhereInput
  >;
}

export interface EventSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EventWhereInput>;
  AND?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  OR?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  NOT?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Account {
  id: Int;
  birthdate?: DateTimeOutput;
  created: DateTimeOutput;
  email: String;
  firstname?: String;
  isActive: Boolean;
  lastname?: String;
  password: String;
  roles: Json;
  salary?: Float;
  updated: DateTimeOutput;
}

export interface AccountPromise extends Promise<Account>, Fragmentable {
  id: () => Promise<Int>;
  application: <T = FragmentableArray<Application>>(args?: {
    where?: ApplicationWhereInput;
    orderBy?: ApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  birthdate: () => Promise<DateTimeOutput>;
  created: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  firstname: () => Promise<String>;
  isActive: () => Promise<Boolean>;
  lastname: () => Promise<String>;
  password: () => Promise<String>;
  roles: () => Promise<Json>;
  salary: () => Promise<Float>;
  events: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updated: () => Promise<DateTimeOutput>;
}

export interface AccountSubscription
  extends Promise<AsyncIterator<Account>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  application: <T = Promise<AsyncIterator<ApplicationSubscription>>>(args?: {
    where?: ApplicationWhereInput;
    orderBy?: ApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  birthdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  created: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  firstname: () => Promise<AsyncIterator<String>>;
  isActive: () => Promise<AsyncIterator<Boolean>>;
  lastname: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  roles: () => Promise<AsyncIterator<Json>>;
  salary: () => Promise<AsyncIterator<Float>>;
  events: <T = Promise<AsyncIterator<EventSubscription>>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updated: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AccountNullablePromise
  extends Promise<Account | null>,
    Fragmentable {
  id: () => Promise<Int>;
  application: <T = FragmentableArray<Application>>(args?: {
    where?: ApplicationWhereInput;
    orderBy?: ApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  birthdate: () => Promise<DateTimeOutput>;
  created: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  firstname: () => Promise<String>;
  isActive: () => Promise<Boolean>;
  lastname: () => Promise<String>;
  password: () => Promise<String>;
  roles: () => Promise<Json>;
  salary: () => Promise<Float>;
  events: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updated: () => Promise<DateTimeOutput>;
}

export interface Application {
  id: Int;
  created: DateTimeOutput;
  offer: Float;
  property_id?: String;
  updated: DateTimeOutput;
  status: ApplicationStatus;
}

export interface ApplicationPromise extends Promise<Application>, Fragmentable {
  id: () => Promise<Int>;
  buyer: <T = AccountPromise>() => T;
  contract: <T = ContractPromise>() => T;
  created: () => Promise<DateTimeOutput>;
  offer: () => Promise<Float>;
  property_id: () => Promise<String>;
  updated: () => Promise<DateTimeOutput>;
  status: () => Promise<ApplicationStatus>;
}

export interface ApplicationSubscription
  extends Promise<AsyncIterator<Application>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  buyer: <T = AccountSubscription>() => T;
  contract: <T = ContractSubscription>() => T;
  created: () => Promise<AsyncIterator<DateTimeOutput>>;
  offer: () => Promise<AsyncIterator<Float>>;
  property_id: () => Promise<AsyncIterator<String>>;
  updated: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<ApplicationStatus>>;
}

export interface ApplicationNullablePromise
  extends Promise<Application | null>,
    Fragmentable {
  id: () => Promise<Int>;
  buyer: <T = AccountPromise>() => T;
  contract: <T = ContractPromise>() => T;
  created: () => Promise<DateTimeOutput>;
  offer: () => Promise<Float>;
  property_id: () => Promise<String>;
  updated: () => Promise<DateTimeOutput>;
  status: () => Promise<ApplicationStatus>;
}

export interface Contract {
  id: Int;
  price: Float;
  created: DateTimeOutput;
  updated: DateTimeOutput;
}

export interface ContractPromise extends Promise<Contract>, Fragmentable {
  id: () => Promise<Int>;
  price: () => Promise<Float>;
  created: () => Promise<DateTimeOutput>;
  updated: () => Promise<DateTimeOutput>;
  application: <T = ApplicationPromise>() => T;
}

export interface ContractSubscription
  extends Promise<AsyncIterator<Contract>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Float>>;
  created: () => Promise<AsyncIterator<DateTimeOutput>>;
  updated: () => Promise<AsyncIterator<DateTimeOutput>>;
  application: <T = ApplicationSubscription>() => T;
}

export interface ContractNullablePromise
  extends Promise<Contract | null>,
    Fragmentable {
  id: () => Promise<Int>;
  price: () => Promise<Float>;
  created: () => Promise<DateTimeOutput>;
  updated: () => Promise<DateTimeOutput>;
  application: <T = ApplicationPromise>() => T;
}

export interface Event {
  id: Int;
  title: String;
  description?: String;
  status: EventStatus;
  created: DateTimeOutput;
  updated: DateTimeOutput;
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  id: () => Promise<Int>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  status: () => Promise<EventStatus>;
  owener: <T = AccountPromise>() => T;
  created: () => Promise<DateTimeOutput>;
  updated: () => Promise<DateTimeOutput>;
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<EventStatus>>;
  owener: <T = AccountSubscription>() => T;
  created: () => Promise<AsyncIterator<DateTimeOutput>>;
  updated: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EventNullablePromise
  extends Promise<Event | null>,
    Fragmentable {
  id: () => Promise<Int>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  status: () => Promise<EventStatus>;
  owener: <T = AccountPromise>() => T;
  created: () => Promise<DateTimeOutput>;
  updated: () => Promise<DateTimeOutput>;
}

export interface AccountConnection {
  pageInfo: PageInfo;
  edges: AccountEdge[];
}

export interface AccountConnectionPromise
  extends Promise<AccountConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AccountEdge>>() => T;
  aggregate: <T = AggregateAccountPromise>() => T;
}

export interface AccountConnectionSubscription
  extends Promise<AsyncIterator<AccountConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AccountEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAccountSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AccountEdge {
  node: Account;
  cursor: String;
}

export interface AccountEdgePromise extends Promise<AccountEdge>, Fragmentable {
  node: <T = AccountPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AccountEdgeSubscription
  extends Promise<AsyncIterator<AccountEdge>>,
    Fragmentable {
  node: <T = AccountSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAccount {
  count: Int;
}

export interface AggregateAccountPromise
  extends Promise<AggregateAccount>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAccountSubscription
  extends Promise<AsyncIterator<AggregateAccount>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ApplicationConnection {
  pageInfo: PageInfo;
  edges: ApplicationEdge[];
}

export interface ApplicationConnectionPromise
  extends Promise<ApplicationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ApplicationEdge>>() => T;
  aggregate: <T = AggregateApplicationPromise>() => T;
}

export interface ApplicationConnectionSubscription
  extends Promise<AsyncIterator<ApplicationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ApplicationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateApplicationSubscription>() => T;
}

export interface ApplicationEdge {
  node: Application;
  cursor: String;
}

export interface ApplicationEdgePromise
  extends Promise<ApplicationEdge>,
    Fragmentable {
  node: <T = ApplicationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ApplicationEdgeSubscription
  extends Promise<AsyncIterator<ApplicationEdge>>,
    Fragmentable {
  node: <T = ApplicationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateApplication {
  count: Int;
}

export interface AggregateApplicationPromise
  extends Promise<AggregateApplication>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateApplicationSubscription
  extends Promise<AsyncIterator<AggregateApplication>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Commentaire {
  id: Int;
  email: String;
  message: String;
  idProperty: Int;
  created: DateTimeOutput;
}

export interface CommentairePromise extends Promise<Commentaire>, Fragmentable {
  id: () => Promise<Int>;
  email: () => Promise<String>;
  message: () => Promise<String>;
  idProperty: () => Promise<Int>;
  created: () => Promise<DateTimeOutput>;
}

export interface CommentaireSubscription
  extends Promise<AsyncIterator<Commentaire>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  email: () => Promise<AsyncIterator<String>>;
  message: () => Promise<AsyncIterator<String>>;
  idProperty: () => Promise<AsyncIterator<Int>>;
  created: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentaireNullablePromise
  extends Promise<Commentaire | null>,
    Fragmentable {
  id: () => Promise<Int>;
  email: () => Promise<String>;
  message: () => Promise<String>;
  idProperty: () => Promise<Int>;
  created: () => Promise<DateTimeOutput>;
}

export interface CommentaireConnection {
  pageInfo: PageInfo;
  edges: CommentaireEdge[];
}

export interface CommentaireConnectionPromise
  extends Promise<CommentaireConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentaireEdge>>() => T;
  aggregate: <T = AggregateCommentairePromise>() => T;
}

export interface CommentaireConnectionSubscription
  extends Promise<AsyncIterator<CommentaireConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentaireEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentaireSubscription>() => T;
}

export interface CommentaireEdge {
  node: Commentaire;
  cursor: String;
}

export interface CommentaireEdgePromise
  extends Promise<CommentaireEdge>,
    Fragmentable {
  node: <T = CommentairePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentaireEdgeSubscription
  extends Promise<AsyncIterator<CommentaireEdge>>,
    Fragmentable {
  node: <T = CommentaireSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCommentaire {
  count: Int;
}

export interface AggregateCommentairePromise
  extends Promise<AggregateCommentaire>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentaireSubscription
  extends Promise<AsyncIterator<AggregateCommentaire>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ContractConnection {
  pageInfo: PageInfo;
  edges: ContractEdge[];
}

export interface ContractConnectionPromise
  extends Promise<ContractConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ContractEdge>>() => T;
  aggregate: <T = AggregateContractPromise>() => T;
}

export interface ContractConnectionSubscription
  extends Promise<AsyncIterator<ContractConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ContractEdgeSubscription>>>() => T;
  aggregate: <T = AggregateContractSubscription>() => T;
}

export interface ContractEdge {
  node: Contract;
  cursor: String;
}

export interface ContractEdgePromise
  extends Promise<ContractEdge>,
    Fragmentable {
  node: <T = ContractPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ContractEdgeSubscription
  extends Promise<AsyncIterator<ContractEdge>>,
    Fragmentable {
  node: <T = ContractSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateContract {
  count: Int;
}

export interface AggregateContractPromise
  extends Promise<AggregateContract>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateContractSubscription
  extends Promise<AsyncIterator<AggregateContract>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EventConnection {
  pageInfo: PageInfo;
  edges: EventEdge[];
}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventEdge>>() => T;
  aggregate: <T = AggregateEventPromise>() => T;
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventSubscription>() => T;
}

export interface EventEdge {
  node: Event;
  cursor: String;
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T = EventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T = EventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEvent {
  count: Int;
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AccountSubscriptionPayload {
  mutation: MutationType;
  node: Account;
  updatedFields: String[];
  previousValues: AccountPreviousValues;
}

export interface AccountSubscriptionPayloadPromise
  extends Promise<AccountSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AccountPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AccountPreviousValuesPromise>() => T;
}

export interface AccountSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AccountSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AccountSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AccountPreviousValuesSubscription>() => T;
}

export interface AccountPreviousValues {
  id: Int;
  birthdate?: DateTimeOutput;
  created: DateTimeOutput;
  email: String;
  firstname?: String;
  isActive: Boolean;
  lastname?: String;
  password: String;
  roles: Json;
  salary?: Float;
  updated: DateTimeOutput;
}

export interface AccountPreviousValuesPromise
  extends Promise<AccountPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  birthdate: () => Promise<DateTimeOutput>;
  created: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  firstname: () => Promise<String>;
  isActive: () => Promise<Boolean>;
  lastname: () => Promise<String>;
  password: () => Promise<String>;
  roles: () => Promise<Json>;
  salary: () => Promise<Float>;
  updated: () => Promise<DateTimeOutput>;
}

export interface AccountPreviousValuesSubscription
  extends Promise<AsyncIterator<AccountPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  birthdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  created: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  firstname: () => Promise<AsyncIterator<String>>;
  isActive: () => Promise<AsyncIterator<Boolean>>;
  lastname: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  roles: () => Promise<AsyncIterator<Json>>;
  salary: () => Promise<AsyncIterator<Float>>;
  updated: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ApplicationSubscriptionPayload {
  mutation: MutationType;
  node: Application;
  updatedFields: String[];
  previousValues: ApplicationPreviousValues;
}

export interface ApplicationSubscriptionPayloadPromise
  extends Promise<ApplicationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ApplicationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ApplicationPreviousValuesPromise>() => T;
}

export interface ApplicationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ApplicationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ApplicationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ApplicationPreviousValuesSubscription>() => T;
}

export interface ApplicationPreviousValues {
  id: Int;
  created: DateTimeOutput;
  offer: Float;
  property_id?: String;
  updated: DateTimeOutput;
  status: ApplicationStatus;
}

export interface ApplicationPreviousValuesPromise
  extends Promise<ApplicationPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  created: () => Promise<DateTimeOutput>;
  offer: () => Promise<Float>;
  property_id: () => Promise<String>;
  updated: () => Promise<DateTimeOutput>;
  status: () => Promise<ApplicationStatus>;
}

export interface ApplicationPreviousValuesSubscription
  extends Promise<AsyncIterator<ApplicationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  created: () => Promise<AsyncIterator<DateTimeOutput>>;
  offer: () => Promise<AsyncIterator<Float>>;
  property_id: () => Promise<AsyncIterator<String>>;
  updated: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<ApplicationStatus>>;
}

export interface CommentaireSubscriptionPayload {
  mutation: MutationType;
  node: Commentaire;
  updatedFields: String[];
  previousValues: CommentairePreviousValues;
}

export interface CommentaireSubscriptionPayloadPromise
  extends Promise<CommentaireSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentairePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentairePreviousValuesPromise>() => T;
}

export interface CommentaireSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentaireSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentaireSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentairePreviousValuesSubscription>() => T;
}

export interface CommentairePreviousValues {
  id: Int;
  email: String;
  message: String;
  idProperty: Int;
  created: DateTimeOutput;
}

export interface CommentairePreviousValuesPromise
  extends Promise<CommentairePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  email: () => Promise<String>;
  message: () => Promise<String>;
  idProperty: () => Promise<Int>;
  created: () => Promise<DateTimeOutput>;
}

export interface CommentairePreviousValuesSubscription
  extends Promise<AsyncIterator<CommentairePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  email: () => Promise<AsyncIterator<String>>;
  message: () => Promise<AsyncIterator<String>>;
  idProperty: () => Promise<AsyncIterator<Int>>;
  created: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ContractSubscriptionPayload {
  mutation: MutationType;
  node: Contract;
  updatedFields: String[];
  previousValues: ContractPreviousValues;
}

export interface ContractSubscriptionPayloadPromise
  extends Promise<ContractSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ContractPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ContractPreviousValuesPromise>() => T;
}

export interface ContractSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ContractSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ContractSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ContractPreviousValuesSubscription>() => T;
}

export interface ContractPreviousValues {
  id: Int;
  price: Float;
  created: DateTimeOutput;
  updated: DateTimeOutput;
}

export interface ContractPreviousValuesPromise
  extends Promise<ContractPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  price: () => Promise<Float>;
  created: () => Promise<DateTimeOutput>;
  updated: () => Promise<DateTimeOutput>;
}

export interface ContractPreviousValuesSubscription
  extends Promise<AsyncIterator<ContractPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Float>>;
  created: () => Promise<AsyncIterator<DateTimeOutput>>;
  updated: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EventSubscriptionPayload {
  mutation: MutationType;
  node: Event;
  updatedFields: String[];
  previousValues: EventPreviousValues;
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventPreviousValuesPromise>() => T;
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventPreviousValuesSubscription>() => T;
}

export interface EventPreviousValues {
  id: Int;
  title: String;
  description?: String;
  status: EventStatus;
  created: DateTimeOutput;
  updated: DateTimeOutput;
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  status: () => Promise<EventStatus>;
  created: () => Promise<DateTimeOutput>;
  updated: () => Promise<DateTimeOutput>;
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<EventStatus>>;
  created: () => Promise<AsyncIterator<DateTimeOutput>>;
  updated: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

export type Json = any;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Account",
    embedded: false
  },
  {
    name: "Application",
    embedded: false
  },
  {
    name: "Contract",
    embedded: false
  },
  {
    name: "Event",
    embedded: false
  },
  {
    name: "EventStatus",
    embedded: false
  },
  {
    name: "ApplicationStatus",
    embedded: false
  },
  {
    name: "Commentaire",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
